const fs = require("fs");
const axios = require("axios");
const path = require("path");

module.exports = {
  config: {
    name: "post",
    aliases: [],
    version: "2.0",
    author: "Aesther",
    role: 2,
    shortDescription: "Cr√©er un post Facebook (texte, image, vid√©o)",
    longDescription: "Publie un message avec ou sans pi√®ces jointes (images ou vid√©os)",
    category: "tools",
    guide: "{pn} <texte> ou r√©ponds √† une image/vid√©o"
  },

  onStart: async function ({ api, event, args }) {
    const { threadID, messageID, messageReply, attachments } = event;
    const postMessage = args.join(" ");
    const filePaths = [];

    const allAttachments = (messageReply?.attachments?.length
      ? messageReply.attachments
      : attachments) || [];

    const files = [];

    try {
      // T√©l√©chargement des fichiers joints
      for (const attachment of allAttachments) {
        const fileExt = attachment.type === "video" ? ".mp4" : ".png";
        const filePath = path.join(__dirname, "cache", `post_${Date.now()}_${Math.floor(Math.random() * 9999)}${fileExt}`);

        const response = await axios.get(attachment.url, {
          responseType: "stream",
          headers: { "User-Agent": "Mozilla/5.0" }
        });

        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);
        await new Promise((res, rej) => {
          writer.on("finish", res);
          writer.on("error", rej);
        });

        files.push(fs.createReadStream(filePath));
        filePaths.push(filePath);
      }

      const postData = {
        body: postMessage || "(aucun texte fourni)"
      };
      if (files.length > 0) postData.attachment = files;

      // Cr√©ation du post
      api.createPost(postData)
        .then((url) => {
          api.sendMessage(`‚úÖ ùó£ùóºùòÄùòÅ ùó∞ùóø√©√© ùóÆùòÉùó≤ùó∞ ùòÄùòÇùó∞ùó∞√®ùòÄ !\nüîó ${url || "Aucun lien retourn√©."}`, threadID, messageID);
        })
        .catch((err) => {
          const fallbackUrl = err?.data?.story_create?.story?.url;
          if (fallbackUrl) {
            return api.sendMessage(`‚úÖ ùó£ùóºùòÄùòÅ ùó∞ùóø√©√© !\nüîó ${fallbackUrl}\n‚ö†Ô∏è (Avec avertissements)`, threadID, messageID);
          }

          const errMsg = err?.message || "‚ùå Erreur inconnue.";
          api.sendMessage(`‚ùå ùóòùóøùóøùó≤ùòÇùóø ùóπùóºùóøùòÄ ùó±ùòÇ ùóΩùóºùòÄùòÅ :\n${errMsg}`, threadID, messageID);
        })
        .finally(() => {
          for (const path of filePaths) {
            fs.unlink(path, () => {});
          }
        });

    } catch (error) {
      console.error("‚ùå Erreur dans la commande post:", error);
      return api.sendMessage("‚ùå Une erreur est survenue lors de la cr√©ation du post.", threadID, messageID);
    }
  }
};
